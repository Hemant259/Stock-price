import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout
train_data = pd.read_csv('/content/drive/MyDrive/CI_Data/Google_Stock_Price_Train.csv')
training_set = train_data.iloc[:, 1:2].values
sc = MinMaxScaler(feature_range = (0, 1))
training_set_scaled = sc.fit_transform(training_set)
x_train = []
y_train = []
for i in range(59, 1257):
  x_train.append(training_set_scaled[i-59:i, 0])
  y_train.append(training_set_scaled[i+1,0])
x_train = np.array(x_train)
y_train = np.array(y_train)
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1)) 
regressor = Sequential()
regressor.add(LSTM(units = 50, return_sequences = True, input_shape = (x_train.shape[1], 1)))
regressor.add(Dropout(0.2))
regressor.add(LSTM(units = 50, return_sequences = True))
regressor.add(Dropout(0.2))
regressor.add(LSTM(units = 50, return_sequences = True))
regressor.add(Dropout(0.2))
regressor.add(LSTM(units = 50))
regressor.add(Dropout(0.2))
regressor.add(Dense(units = 1))
regressor.compile(optimizer = 'adam', loss = 'mean_squared_error')
 
regressor.fit(x_train, y_train, epochs = 200, batch_size = 32)
test_data = pd.read_csv('/content/drive/MyDrive/CI_Data/Google_Stock_Price_Test.csv')
actual_price = test_data.iloc[:, 1:2].values
total_data = pd.concat((train_data['Open'], test_data['Open']), axis = 0)
input_data = total_data[len(total_data)-len(test_data)-60 :].values
input_data = input_data.reshape(-1, 1)
input_data = sc.transform(input_data)
x_test = []
for i in range(60, 80):
  x_test.append(input_data[i-60:i, 0])
x_test = np.array(x_test)
x_test = x_test.reshape(x_test.shape[0], x_test.shape[1],1)
predicted_price = regressor.predict(x_test)
predicted_price = sc.inverse_transform(predicted_price)  
plt.plot(actual_price, color = 'red', label = 'Actual Price')
plt.plot(predicted_price, color = 'blue', label = 'Predicted Price')
plt.title('Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Stock Price')
plt.legend()
plt.show()
